# DOING SOME CONDITIONAL CHECKING
# CHECKING IF RUNTIME ARGUMENTS ARE COOL
if [ -z "$1" ]
then
	clear
	echo "Welcome to $programname $version ($date)"
	echo "by $author"
        echo ""
	echo "ERROR: NO ARGUMENTS SPECIFIED
        echo "AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: "
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
        echo ""
	echo "EXAMPLE:"
        echo "./LUKSUS /dev/sdb1 rambo1"
        echo ""
        echo "$programname also supports loopback devices (an encrypted file-container instead of a physical medium)"
        echo "./luksus loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
        echo "EXAMPLE for an encrypted filecontainer"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /snacks.encrypted 300M" 
        echo ""
# hmm exit 1
fi

if [ -z "$2" ]
then
	clear
	echo "Welcome to $programname $version ($date)"
	echo "by $author"
        echo ""
	echo "ERROR: AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: "
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
        echo ""
	echo "EXAMPLE:"
        echo "./LUKSUS /dev/sdb1 rambo1"
        echo ""
        echo "$programname now also supports loopback devices (an encrypted file-container instead of a physical medium)"
        echo "./luksus DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
        echo "EXAMPLE for an encrypted filecontainer"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /snacks.encrypted 300M" 
        echo ""
exit 1
fi


# Sanity check
# Got root?
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
echo "Great! We are root"
echo "$programname is proceeding"

# Dependency check, could need a list and a for loop. recreate as a function and include a for loop
if [ -z `which grep` ] ;then echo "Missing grep" && exit; fi
if [ -z `which cryptsetup` ] ;then echo "Missing cryptsetup" && exit; fi
if [ -z `which dialog` ] ;then echo "Missing dialog" && exit; fi
if [ -z `which shred` ] ;then echo "Missing shred" && exit; fi
				    
# Check to see if specified device exists
if [ -b "$device" ] ; then echo "OK, $device exists"  ;else echo "$device was not found. $programname is now exiting" && exit 1; fi


