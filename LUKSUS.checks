# DOING CONDITIONAL CHECKING
# CHECKING IF RUNTIME ARGUMENTS ARE COOL
## Testing if the user has any options for LUKSUS. These should
# probably be ported to GETOPTS code, but it has to stay like this for
# now. Will fix later, maybe, one day.
if [ -z "$1" ]
then
    cat LUKSUS.usage
exit 1
fi

if [ -z "$2" ]
then
    cat LUKSUS.usage
exit 1
fi

# Runtime Arguments Checking
# I should use getops. Instead I make use of a crude but efficient 
# test to see if the user wants truecrypt.
if [[ "$3" = "truecrypt" ]] || [[ "$4" = "truecrypt" ]] || [[ "$5" = "truecrypt" ]] || [[ "$6" = "truecrypt" ]] || [[ "$7" = "truecrypt" ]] || [[ "$8" = "truecrypt" ]] || [[ "$9" = "truecrypt" ]];
then
echo "Using Truecrypt"
ENCRYPTION=TRUECRYPT
if [ -z `which tcplay` ] ;then echo "Missing tcplay. Cannot continue. Please install Truecrypt (tcplay package)" && exit; fi
else
echo Using DM-LUKS Cryptsetup
ENCRYPTION=LUKS
fi

# Dialog checks
if [ -z `which dialog` ] ;
then 
echo "Missing dialog. Disabling Dialogs." 
dialog=false
else
echo "Dialog exists"
dialog=true
fi

# Does the user explicitly not wish to see dialog? Those crazy purists!
if [[ "$3" = "nodialog" ]] || [[ "$4" = "nodialog" ]] || [[ "$5" = "nodialog" ]] || [[ "$6" = "nodialog" ]] || [[ "7" = "nodialog" ]] || [[ "$8" = "nodialog" ]] || [[ "$9" = "nodialog" ]];
then
dialog=false
echo Dialog disabled by user request
else
echo Proceeding
fi

# user wants to use a keyfile
if [[ "$3" = "usekey" ]] || [[ "$4" = "usekey" ]] || [[ "$5" = "usekey" ]] || [[ "$6" = "usekey" ]] || [[ "7" = "usekey" ]] || [[ "$3" = "keyfile" ]] || [[ "$4" = "keyfile" ]] || [[ "$5" = "keyfile" ]] || [[ "$6" = "keyfile" ]] || [[ "7" = "keyfile" ]] ;
then
echo "Using keyfile"
USEKEY=true
else
echo Using passphrase
USEKEY=false
fi

# Sanity check
# Got root?
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
echo "Great! We are root"
echo "$programname is proceeding"

# Dependency check, could need a list and a for loop. recreate as a function and include a for loop
if [ -z `which grep` ] ;then echo "Missing grep" && exit; fi
if [ -z `which cryptsetup` ] ;then echo "Missing cryptsetup" && exit; fi
if [ -z `which shred` ] ;then alias shred=gshred; fi

# need to use GNU head also - from GNU coreutils

if [ $UNAME == DragonFly ] ;
	then 
	echo We are on DragonFlyBSD here. 
	# crude way to deal with different binary names
	alias head head
        alias shred gshred
# loading dm kernel module in DragonflyBSD
	kldload dm
	# for some reason vnconfig must be ran once before it will start working
	# it seems that the DragonFlyBSD kernel is initializing something
	# so that's exactly what I'm doing here
	vnconfig 1>/dev/null 2>/dev/null
	vnconfig
	OS=DragonFly
	else
	echo On Linux, continuing.
fi


if [ $UNAME == FreeBSD ] ;
	then 
	echo We are on FreeBSD here. Cool.
	# crude way to deal with different binary names
	alias head head
        alias shred gshred
# loading dm kernel module in FreeBSD
	kldload geom_eli
	# for some reason vnconfig must be ran once before it will start working
	# it seems that the FreeBSD kernel is initializing something
	# so that's exactly what I'm doing here
	vnconfig 1>/dev/null 2>/dev/null
	vnconfig
	OS=FreeBSD
	else
	echo On Linux, continuing.
fi


# Check to see if specified device exists
if [ -e "$device" ]
	then 
	echo "OK, $device exists"
	else 
	echo "$device was not found. $programname is now exiting" 
	exit 1
fi

LOOPBACKTEST()
{
  if [[ $device == *loop* ]]
  then
  loopbackdevice=true
  elif [[ $device == *vn* ]]
  then
  loopbackdevice=true
  elif [[ $device = *md* ]]
  then
  loopbackdevice=true
  else
  loopbackdevice=false  
  fi
}
LOOPBACKTEST
