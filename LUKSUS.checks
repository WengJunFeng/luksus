# DOING CONDITIONAL CHECKING
# CHECKING IF RUNTIME ARGUMENTS ARE COOL
# These checks do not check if the 3rd and 4th runtime arguments
# are provided or correct. In the future, this be necessary, just
# for consistency and correctness sake. It only checks the first $1
# and second $2 argument.


## Testing if the user has any options for LUKSUS. These should
# probably be ported to GETOPTS code, but it has to stay like this for
# now. Also this is lame, I should be able to catch both arguments in
# one test. Will fix later.
if [ -z "$1" ]
then
        echo ""
	echo "ERROR: NO ARGUMENTS SPECIFIED"
        echo "AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: Physical drive"
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
	echo "USAGE: File container"
	echo "./LUKSUS loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
	echo "To enable the use of TrueCrypt instead of DM-LUKS append the option: truecrypt"
        echo ""
        echo "EXAMPLES: DISK DRIVES, MEMORY CARDS, USB STICK, ETC"
        echo "./LUKSUS /dev/sdb1 rambo1"
	echo "./LUKSUS /dev/sdc1 library truecrypt"
        echo ""
        echo "CREATING AN ENCRYPTED FILECONTAINER (Linux and DragonFlyBSD)"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
        echo "./LUKSUS /dev/vn0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
exit 1
fi

if [ -z "$2" ]
then
        echo ""
	echo "ERROR: NO ARGUMENTS SPECIFIED"
        echo "AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: Physical drive"
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
	echo "USAGE: File container"
	echo "./LUKSUS loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
	echo "To enable the use of TrueCrypt instead of DM-LUKS append the option: truecrypt"
        echo ""
        echo "EXAMPLES: DISK DRIVES, MEMORY CARDS, USB STICK, ETC"
        echo "./LUKSUS /dev/sdb1 rambo1"
	echo "./LUKSUS /dev/sdc1 library truecrypt"
        echo ""
        echo "CREATING AN ENCRYPTED FILECONTAINER (Linux and DragonFlyBSD)"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
        echo "./LUKSUS /dev/vn0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
exit 1
fi


# I should use getops. Instead I make use of a crude but efficient 
# test to see if the user wants truecrypt.

if [[ "$3"=truecrypt || "$4"=truecrypt || "$5"=truecrypt ]] ; then
if [ -z `which tcplay` ] ;then echo "Unable To Continue: Missing tcplay (truecrypt)" && exit; fi
echo "Truecrypt Enabled"
USETRUECRYPT=true
else
echo Using Cryptsetup
fi



# Sanity check
# Got root?
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
echo "Great! We are root"
echo "$programname is proceeding"

# Dependency check, could need a list and a for loop. recreate as a function and include a for loop
if [ -z `which grep` ] ;then echo "Missing grep" && exit; fi
if [ -z `which cryptsetup` ] ;then echo "Missing cryptsetup" && exit; fi
if [ -z `which dialog` ] ;then echo "Missing dialog" && exit; fi
if [ -z `which shred` ] ;then alias shred=gshred; fi

# need to use GNU head also - from GNU coreutils
alias head=gshred
				    
# Check to see if specified device exists
if [ -e "$device" ] ; 
	then echo "OK, $device exists";
	else 
	echo "$device was not found. $programname is now exiting" ; 
	exit 1; 
fi

if [ $UNAME = DragonFly ] ;
then
echo We are on DragonFlyBSD here. Cool.
# crude way to deal with different binary names
alias shred=gshred
# loading dm kernel module
kldload dm
# for some reason vnconfig must be ran once before it will start working
# it seems that the DragonFlyBSD kernel is initializing something
# so that's exactly what I'm doing here
vnconfig 1>/dev/null 2>/dev/null
else
echo On Linux, continuing.
fi