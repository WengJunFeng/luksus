# DOING CONDITIONAL CHECKING
# CHECKING IF RUNTIME ARGUMENTS ARE COOL
# These checks do not check if the 3rd and 4th runtime arguments
# are provided or correct. In the future, this be necessary, just
# for consistency and correctness sake. It only checks the first $1
# and second $2 argument.


## Testing if the user has any options for LUKSUS. These should
# probably be ported to GETOPTS code, but it has to stay like this for
# now. Also this is lame, I should be able to catch both arguments in
# one test. Will fix later.
if [ -z "$1" ]
then
    cat LUKSUS.usage
exit 1
fi

if [ -z "$2" ]
then
    cat LUKSUS.usage
exit 1
fi

# Runtime Arguments Checking
# I should use getops. Instead I make use of a crude but efficient 
# test to see if the user wants truecrypt.
#if [ $3="truecrypt" ] || [ $4="truecrypt" ] || [$5="truecrypt"]
if [[ "$3" = "truecrypt" ]] || [[ "$4" = "truecrypt" ]] || [[ "$5" = "truecrypt" ]]
then
echo "Using Truecrypt"
ENCRYPTION=TRUECRYPT
if [ -z `which tcplay` ] ;then echo "Missing tcplay. Cannot continue. Please install Truecrypt (tcplay package)" && exit; fi
else
echo Using DM-LUKS Cryptsetup
ENCRYPTION=LUKS
fi

if [[ "$3" = "usekey" ]] || [[ "$4" = "usekey" ]] || [[ "$5" = "usekey" ]] || [[ "$6" = "usekey" ]]
then
echo "Using key"
USEKEY=true
else
echo Using passphrase
USEKEY=false
fi


# Sanity check
# Got root?
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
echo "Great! We are root"
echo "$programname is proceeding"

# Dependency check, could need a list and a for loop. recreate as a function and include a for loop
if [ -z `which grep` ] ;then echo "Missing grep" && exit; fi
if [ -z `which cryptsetup` ] ;then echo "Missing cryptsetup" && exit; fi
if [ -z `which dialog` ] ;then echo "Missing dialog" && exit; fi
if [ -z `which shred` ] ;then alias shred=gshred; fi

# need to use GNU head also - from GNU coreutils
alias head=gshred
				    
# Check to see if specified device exists
if [ -e "$device" ] ; 
	then echo "OK, $device exists";
	else 
	echo "$device was not found. $programname is now exiting" ; 
	exit 1; 
fi

if [ $UNAME == DragonFly ] ;
	then echo We are on DragonFlyBSD here. Cool.
	# crude way to deal with different binary names
	alias shred=gshred
	# loading dm kernel module in DragonflyBSD
	kldload dm
	# for some reason vnconfig must be ran once before it will start working
	# it seems that the DragonFlyBSD kernel is initializing something
	# so that's exactly what I'm doing here
	vnconfig 1>/dev/null 2>/dev/null
	else
	echo On Linux, continuing.
fi
