# DOING CONDITIONAL CHECKING
# CHECKING IF RUNTIME ARGUMENTS ARE COOL
# These checks do not check if the 3rd and 4th runtime arguments
# are provided or correct. In the future, this be necessary, just
# for consistency and correctness sake. It only checks the first $1
# and second $2 argument.

if [ -z "$1" ]
then
        echo ""
	echo "ERROR: NO ARGUMENTS SPECIFIED"
        echo "AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: "
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
        echo "OR"
	echo "./LUKSUS loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
        echo ""
	echo "EXAMPLE FOR A DISK DRIVE, MEMORY CARD or USB STICK:"
        echo "./LUKSUS /dev/sdb1 rambo1"
        echo ""
        echo "EXAMPLE FOR CREATING AN ENCRYPTED FILECONTAINER (Linux)"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
        echo ""
        echo "EXAMPLE FOR CREATING AN ENCRYPTED FILECONTAINER (DragonFlyBSD)"
        echo "./LUKSUS /dev/vn0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
        echo ""
exit 0
fi

if [ -z "$2" ]
then
        echo ""
	echo "ERROR: NO ARGUMENTS SPECIFIED"
        echo "AT LEAST TWO COMMAND LINE ARGUMENTS ARE REQUIRED"
        echo ""
	echo "USAGE: "
	echo "./LUKSUS DEVICENAME NICKNAME-of-luks-container"
        echo "OR"
	echo "./LUKSUS loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes"
        echo ""
	echo "EXAMPLE FOR A DISK DRIVE, MEMORY CARD or USB STICK:"
        echo "./LUKSUS /dev/sdb1 rambo1"
        echo ""
        echo "EXAMPLE FOR CREATING AN ENCRYPTED FILECONTAINER:"
        echo "./LUKSUS /dev/loop0 MY-SECRET-LIBRARY /mysecretlibrary.encrypted 300M" 
        echo ""
exit 0
fi


# Sanity check
# Got root?
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
echo "Great! We are root"
echo "$programname is proceeding"

# Dependency check, could need a list and a for loop. recreate as a function and include a for loop
if [ -z `which grep` ] ;then echo "Missing grep" && exit; fi
if [ -z `which cryptsetup` ] ;then echo "Missing cryptsetup" && exit; fi
if [ -z `which dialog` ] ;then echo "Missing dialog" && exit; fi
if [ -z `which shred` ] ;then alias shred=gshred; fi

# need to use GNU head also - from GNU coreutils
alias head=gshred
				    
# Check to see if specified device exists
if [ -e "$device" ] ; 
	then echo "OK, $device exists";
	else 
	echo "$device was not found. $programname is now exiting" ; 
	exit 1; 
fi

if [ $UNAME = DragonFly ] ;
then
echo We are on DragonFlyBSD here. Cool.
# crude way to deal with different binary names
alias shred=gshred
# loading dm kernel module
kldload dm
# for some reason vnconfig must be ran once before it will start working
# it seems that the DragonFlyBSD kernel is initializing something
# so that's exactly what I'm doing here
vnconfig 1>/dev/null 2>/dev/null
else
echo On Linux, continuing.
fi
