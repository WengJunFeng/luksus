{"name":"Luksus","tagline":"LUKSUS","body":"        __       __  __   __ __    _____    __  __   _____\r\n       / /      / / / /  / //_/   / ___/   / / / /  / ___/\r\n      / /      / / / /  / ,<      \\__ \\   / / / /   \\__ \\ \r\n     / /___   / /_/ /  / /| |    ___/ /  / /_/ /   ___/ / \r\n    /_____/   \\____/  /_/ |_|   /____/   \\____/   /____/  \r\n\r\n\r\n# SYNOPSIS\r\n\r\nLUKSUS is a tool that creates an encrypted volume and filesystem on a hardrive or other storage\r\nmedia as well as a filecontainer.\r\nIt can use the following encryption facilities: LUKS, Truecrypt and GELI. \r\nIt works on Linux, DragonflyBSD and FreeBSD.\r\n\r\n# BACKGROUND\r\n\r\nThe purpose of this script is to provide to myself, an easy eay to encrypt\r\nstorage media in Linux and DragonflyBSD, such as hardrives, usb sticks,\r\nsd cards or external hardrives. It uses the LUKS and cryptsetup\r\ncrypto subsystem internal to the Linux Kernel. It can also use\r\nTruecrypt encryption with the tcplay command.\r\nThis is thus a wrapper script for cryptsetup, shred and mkfs.\r\nInstead of having to read up on the documentation for these\r\nwonderful tools, I wrote this wrapper script to handle the dirtywork.\r\n\r\n# USAGE\r\nThe usage of LUKSUS can take two different forms, \r\nmainly whether you are using LUKSUS on a physical device or a\r\nvirtual file. These two requires somewhat different commandline\r\narguments.\r\nAs of version 1.0, LUKSUS defaults to passphrase\r\nfor securing the volume. Using a keyfile is optional\r\nand can be activated by using the commandline option: usekey\r\n\r\nCommand line arguments are: devicename volumename size truecrypt \r\n\r\n# Explanations:\r\nIf creating a filecontainer, then the argument size is needed (examples: 1000M 5G)\r\nSee further description below.\r\n\r\noptional commandline arguments are: usekey nodialog\r\nusekey will enable the use of a keyfile instead of a passphrase\r\nnodialog will disable dialog prompts. Some people wants this.\r\n\r\nAT LEAST TWO FIRST COMMAND LINE ARGUMENTS ARE REQUIRED\r\n\r\n./LUKSUS DEVICENAME VOLUMENAME optional options\r\n./LUKSUS DEVICENAME VOLUMENAME LOCATION-OF-ENCRYTED-VOLUME-CONTAINER sizeM truecrypt usekey\r\n\r\nUSAGE: Physical drive\r\n./LUKSUS DEVICENAME NICKNAME-of-luks-container\r\n./LUKSUS DEVICENAME VOLUMENAME truecrypt\r\n\r\nUSAGE: File container\r\n./LUKSUS loopback-DEVICENAME nickname-of-lukscontainer filename filesize-in-megabytes\r\n\r\nEXAMPLES: \r\nENCRYPT PHYSICAL MEDIA: Using password\r\n./LUKSUS /dev/sdb1 rambo1\r\n \r\nENCRYPT PHYSICAL MEDIA: Using keyfile\r\n./LUKSUS /dev/sdb1 rambo1 usekey\r\n\r\nCREATING AN ENCRYPTED FILECONTAINER (LUKS on Linux and DragonFlyBSD)\r\n./LUKSUS /dev/loop0 ENCRYPTEDVOLUME /encryptedvolume.encrypted 300M \r\n./LUKSUS /dev/vn0 ENCRYPTEDVOLUME /encryptedvolume.encrypted 300M\r\n\r\nTo enable the use of TrueCrypt instead of LUKS append the option: truecrypt\r\n./LUKSUS /dev/sdc1 library truecrypt\r\n./LUKSUS /dev/loop0 ENCRYPTEDVOLUME /encryptedvolume.encrypted 300M truecrypt\r\n\r\nThis last example is a corner case. This would create an encrypted\r\nfilecontainer using truecrypt with a passphrase as well as with a keyfile.\r\nThat keyfile would then work as a backdoor or an extra way into the archive, in case the password gets lost.\r\n./LUKSUS /dev/loop0 ENCRYPTEDVOLUME /encryptedvolume.encrypted 300M truecrypt usekey\r\n\r\n\r\n# ENCRYPTED FILECONTAINER\r\nIt is possible to create an encrypted file container\r\nThe usage then changes a little as the script then needs to\r\nknow which loopbackdevice you wish to use, where the encrypted\r\nfilecontainer should be located, and how large it should be.\r\nPlease note that the size must have M for megabytes or G for\r\ngigabyte appended to the size.\r\n\r\nThe following will use loop0, and place the encrypted container in\r\n/usr and will have 1000MiB as space.\r\n\r\n./LUKSUS /dev/loop0 mysecretlibrary /usr/thelibrary.encrypted 1000M\r\n\r\nFor creating an encrypted filecontainer on DragonFlyBSD\r\n./LUKSUS /dev/vn0 mysecretlibrary /usr/thelibrary.encrypted 1000M\r\n\r\n# DRAGONFLYBSD NOTES:\r\nThere are a few things to note about running this on DragonflyBSD...\r\n\r\nDragonFlyBSD does not ship with bash by default, so you have to install it\r\nfrom the repositories. \"pkg_radd bash\" will do the trick\r\nNO EXT4, UFS IS USED \r\nThe scripts does the same things as under Linux, but with one major\r\nexception.\r\nIt does not create EXT4 filesystems, but UFS filesystems. \r\nThe mkfs.ext4 tool shipped in e2fsprogs does not like the Dfly\r\nloopback device, and I have not yet managed to get it to work.\r\nTherefore the user will get a UFS filesystem instead.\r\n\r\n# TRUECRYPT NOTES:\r\n\r\nTruecrypt defaults to using passphrase for volume security.\r\nA keyfile can be added by using the commandline argument: usekey\r\n\r\nApplies to both on Linux and DragonflyBSD\r\nTruecrypt / tcplay is slow when it is creating encrypted\r\nfilecontainers on Linux. Once the volume has been created\r\nspeeds are nominal. This has at least been the case in my \r\ntesting on Virtualbox instances of various Linux distributions.\r\n\r\nFor some reason the cryptsetup tool in Dfly takes a very long time\r\nto do its work when it is manipulating loopback LUKS volumes, ie.\r\nfile containers... I do not know the reason to this strange behaviour, \r\nbut once it has created the volume, file transfer speeds are nominal and fast.\r\nIn my experience it takes 15 minutes to finish the process of creating\r\nan encrypted filecontainer. Just have patience when creating encrypted filecontainers with \r\nloopback devices:)\r\n\r\n# FAQ:\r\nQ: Why should I use this script? \r\nA: I wrote this script because I wanted to have a way to easily and casually create encrypted volumes.\r\n   Because doing all these tasks manually is \r\n   time consuming and can be a little tricky. I wanted to have a simple\r\n   way of creating encrypted volumes instead of having to consult\r\n   documentation each and every time I wanted to do it.\r\n   Also, writing this has been a great learning experience.\r\n\r\nQ: What is the license of LUKSUS?\r\nA: LUKSUS is free libre open source software, released under the GPLv2\r\n   license.\r\n\r\nQ: Why should I encrypt?\r\nA: It is beyond the scope of this README to go indepth, but let me\r\n   give you a primer with 3 different scenarios. Please\r\n   google/duckduckgo for more info. Read some of Bruce Schneier's excellent articles and essays.\r\n    \r\n   At university I have met many wonderful people. Among them are\r\n   exchange students who come from repressive regimes. These students,\r\n   say they are studying political science and get fairly deeply into\r\n   studies of democracy. When they bring their laptop back home, and it\r\n   for whichever reason gets seized by the government, that person will\r\n   be in trouble. The solution to that would be to encrypt the\r\n   files/drives.\r\n\r\n   You are working for a top notch startup. You have written a bunch\r\n   of amazing code, and created some fantastic technical charts and your\r\n   competitors are envious. Then one day, at a cafe, your laptop gets\r\n   stolen. You loose all your files. You had a backup, sure, but the\r\n   thief might sell your data. The solution is to encrypt the drive.\r\n\r\nQ: What have you based this on?\r\nA: It is based on the guides provided in the LUKS FAQ, Truecrypt/Tcplay FAQ, and FreeBSD documentation:\r\n   Cryptsetup / LUKS FAQ: https://code.google.com/p/cryptsetup/wiki/FrequentlyAskedQuestions\r\n   Truecrypt documentation:  http://www.truecrypt.org/docs/\r\n   FreeBSD disk encryption documentation: http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/disks-encrypting.html\r\n   NetBSD disk encryption documentation: http://www.netbsd.org/docs/guide/en/chap-cgd.html\r\n   OpenBSD crypto documentation: http://www.openbsd.org/crypto.html\r\n   OpenBSD 16 systems tips: http://www.16s.us/OpenBSD/vnconfig.txt\r\n\r\nQ: How is the script designed?\r\nA: The script works like this:\r\n   all existing data will be brutally removed beyond reconstruction (forensically)\r\n   then it writes random data to the drive\r\n   then creates a keyfile\r\n   then encrypts the drive using the keyfile stored in /keys\r\n   a LUKS header backup will also be placed in /keys\r\n   please remember to take care of your /keys\r\n   if you loose your /keys, the keyfile to your encrypted drive, then\r\n   the data will be impossible to retrieve.\r\n\r\n\r\nQ: Is there a Disclaimer? \r\nA: Oh yes there is.\r\n    As with all security measures: Think them through, use with caution.\r\n    I, the author, take no responsibility if a black hole appears,\r\n    and implodes your house, your town and the entire planet earth as an\r\n    effect of using this script.\r\n    Understand that the author takes no responsibility, and cannot\r\n    be held liable if you, the user, use the script to destroy the\r\n    files/contents of your storage media.\r\n    As a consequence it is the sole responsibility of the user\r\n    to use this software correctly. The author cannot be held\r\n    liable for any damages, as of this disclaimer.\r\n    Furthermore you are responsible for the content you encrypt.\r\n    END DISCLAIMER\r\n\r\n\r\nQ: I lost the key or the password, is there a way to restore the key\r\nif I forgot it?\r\nA: No. Really. No.\r\n\r\nQ: What's in the secret sauce?\r\nThis is the gist of the encryption process is this command:\r\n\r\nLUKS\r\ncryptsetup --batch-mode --verbose --key-size=512 --cipher=aes-xts-plain64 luksFormat $device $keyfile\r\n\r\nTruecrypt (tcplay)\r\ntcplay --create --device=$device --cipher=AES-256-XTS\r\n\r\nGeli (FreeBSD)\r\ngeli init -s 4096 $device\r\n\r\n\r\nQ: Why are we using the AES-256 cipher?\r\nA: http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html\r\n\r\nQ: ON KEYFILES - ARE THEY BETTER THAN PASSWORDS?\r\nA: -\r\n(Passphrase-protected) Keyfiles are two-factor (something you have,\r\nsomething you know) and passphrases are one-factor (something you\r\nknow). It should be obvious that (passphrase-protected) keyfiles are\r\nat least as secure as passphrases because you need a passphrase to use\r\nthem. Considering you also need access to the appropriate filesystem,\r\nthey'd be more secure, if just by a little bit.\r\nIf you're talking about plaintext keyfiles, they're one-factor secure\r\n(something you have). It's not so obvious whether a plaintext is more\r\nor less secure than a passphrase. It would depend on the context, I guess.\r\n\r\nKeyfiles are possession factors (something you have). Possession\r\nfactors are threatened by theft and duplication. Since a keyfile is\r\njust a file, it's relatively easy to duplicate it, so it's not a very\r\nstrong factor. In theory, a possession factor can be destroyed -- but\r\nnot if it's been duplicated or stolen!\r\nPassphrases are knowledge factors (something you know). Knowledge\r\nfactors are threatened by guessing and discovery. A strong passphrase\r\nthat's not stored anywhere but your head is still weak against\r\ncompulsive discovery (the cyrpto wrench attack, legal compulsion, etc.).\r\n\r\nSource: Reddit discussion\r\nhttp://www.reddit.com/r/crypto/comments/1gnezg/keyfile_or_passphrase/\r\n\r\n\r\nQ: What are the requirements of using LUKSUS:\r\nA: an empty hardrive or storage media\r\n   knowledge about which device the hardrive or storage\r\n   (blkid or dmesg will provide this)\r\n   \r\n   On BSD:\r\n   coreutils \r\n   - GNU coreutils\r\n   bash\r\n   optional requirements:\r\n   dialog - If you want a nice dialog box, then make sure you have \r\n   dialog installed. This is not required anymore though. Some nutty\r\n   puritans dislike dialog.\r\n   tcplay - If you want to encrypt using truecrypt, then install the\r\n   tcplay package.\r\n\r\nQ: On what platforms and distributions has LUKSUS been tested?\r\nA: LUKSUS works on Linux and DragonFlyBSD.\r\n   Tested on the distros: Debian, Ubuntu, ArchLinux and DragonFlyBSD\r\n\r\nQ: What license is LUKSUS released under?\r\nA: Luksus is released under GNU GPLv2 License\r\n   located here: http://www.gnu.org/licenses/gpl-2.0.html\r\n \r\nQ: I have found a bug or have another issue, how can I report it?\r\nA: Any issues can be reported to the Github issue tracker for\r\n   this project, located here: https://github.com/thomasfrivold/luksus/issues\r\n   I really want to hear from you, feedback, the ways you use it, \r\n   suggestions, tips and so on. \r\n   My email is: thomas.frivold./\\a\\/t/\\.gmail.com\r\n\r\nQ: What is the LUKSUS homepage?\r\nA: LUKSUS is maintained in a Github repository.\r\n   The latest version can always be downloaded\r\n   from http://github.com/thomasfrivold/luksus\r\n\r\n# TODO\r\n+ Add NetBSD and OpenBSD\r\n\r\n\r\n# CHANGELOG\r\n\r\nv1.2.1\r\nSmall regression fix - fixed a small mistake.\r\n\r\nv1.2\r\nFixes some regressions\r\n\r\nv1.1\r\nAdds FreeBSD support\r\n\r\nv1.0\r\nLUKSUS is stable and mature enough to be called 1.0\r\nTested on Linux and DragonFlyBSD\r\n\r\n\r\nv1.0RC9 03.08.2013\r\nThe testing phase of LUKSUS has really forced a lot of \r\nimprovements all over. The code is now completely modular, and\r\nadding further encryption engines and operating systems should\r\nbe a walk in the park.\r\nNow executes flawlessly in all operating modes on Linux and DragonFlyBSD\r\n\r\nv1.0RC8 02.08.2013\r\n+ added nodialog option and FreeBSD support\r\n+ Dialog use is not enforced anymore. If package is not installed,\r\n+  then the script will skip fancy dialog use. Dialog is not shipped\r\n+  with all distros by default. Less headache for the user.\r\n\r\n\r\nv1.0RC7 30.07.2013\r\n+Cleanup\r\n\r\nv1.0RC5 29.07.2013 12:30\r\n\r\n+LUKSUS now defaults to passphrase. Using a keyfile is \r\noptional. User feedback suggested that many users preferred\r\nto use passphrase instead of keys. Therefore the default\r\nhas been set to passphrase, with using keyfiles being optional.\r\n+The dawn of modularization of the encryption engine code.\r\nI am hoping to be able to add support for FreeBSDs GBDE and GELI,\r\nNetBSD's CGD and OpenBSDs BIOCTL. This would bump the number of\r\nsupported platforms to 5.\r\n\r\nv1.0RC4 22.07.2013 15:09\r\n+Removed some extra integrity checks. They were redundant and broke\r\nTruecrypt support\r\nFeature freeze, and all that is required now is more testing.\r\nFixed some regressions. Testing is a good idea.\r\n\r\nv1.0RC3 22.07.2013 12:00\r\n+Better dialog - yesno now works\r\nI like where this is going\r\n\r\nv1.0RC2 18.07.2013 19:00\r\n\r\n+Improved logging and reporting further\r\n+Cleaner OS Detection\r\n\r\nv0.99\r\nTruecrypt command line option added\r\nUsage cleanup\r\nReadme testing\r\n\r\nv0.95 06.03.2013 15:13\r\n+Truecrypt support\r\n\r\nv0.8.91 05.03.2013 20:00\r\nSmall bugfixes\r\n\r\nv0.8.9 05.03.2013 13:28\r\n+DragonFlyBSD support is now fully supported.\r\nCryptsetup / dm-luks spends a lot of time with its operation, \r\n10-15 minutes, but apart from that, LUKSUS runs on DragonFlyBSD.\r\nFunctions need more attention and cleanup, but everything is working\r\nquite well now.\r\n\r\nv0.8.5 26.02.2013 12:00\r\nCleanup before public release on Freecode.com!\r\nHello World\r\n\r\nv0.8.4 26.02.2013 10:00\r\nAdded a routine to check the screensize, and display\r\na logo according to which screensize the user has.\r\n# Cleaned up a little bit here and there\r\n\r\nv0.8.3 25.02.2013 20:00\r\nTweaks \r\n\r\nv0.8.2 25.02.2013 15:00\r\nAdded a welcome sequence\r\nAdded a logo! (yay)\r\n\r\nv0.8.1 25.02.2013 14:30\r\nAdded missing apostrophe\r\n\r\nv0.8 24.02.2013 10:15\r\n+ Improved code quality, implemented simple modularization.\r\n\r\nv0.7 02.01.2013 13:20\r\n+ Added support for loopback devices \r\n  creating an encrypted container is now possible with LUKSUS\r\n+ Began work on implementing functions throughout\r\n+ Added some conditional checks with regex\r\nv0.6 02.01.2013 01:35\r\n+ improved documentation (README file)\r\n+ Added some nice sanity checks\r\n+ Further cleaned up the code\r\n+ Added a definite CTRL+C to cancel now\r\n+ Added dependency checks\r\n\r\nv0.5 25.04.2012 12:30\r\n+ initial public release\r\n  live on github here: https://github.com/thomasfrivold/luksus\r\n  (yay)\r\n+ massive cleanup\r\n+ added a conditional check to verify that user is root\r\n+ added a conditional check in the middle of the procedure to\r\n  verify that a LUKS container has been created on the device\r\n  good for integrity \r\n+ added a routine to hackup the luks header with a conditional\r\n  check as suggested by the luks FAQ\r\n  here: http://code.google.com/p/cryptsetup/wiki/FrequentlyAskedQuestions#6._Backup_and_Data_Recovery\r\n+ fixed mounting procedure\r\n  changed name of the script from cryptcreate to luksus\r\n  the luksus name is more a pun than a functional name\r\n  luksus means luxury in Norwegian and coincidentally it includes the main technology\r\n  used to encrypt hardrives in Linux since the 2.6 kernels - Linux Unified Key Setup\r\n  on a celebratory note, the script can now be considered stable. Even though\r\n  it lacks some niceties such as a fully fledged ncurses dialog menu system\r\n  which is aimed at version v1.0\r\n  - Thomas Frivold \r\n\r\nv0.4\r\n+ cleaned up script\r\n+ added required runtime arguments\r\n\r\nv0.3\r\n+ added command line input\r\n\r\nv0.2\r\n+ cosmetic fixes\r\n+ did some nice thinking about dialog\r\n\r\nv0.1 16.04.2012 GMT+1 1320\r\n+ initial release","google":"UA-18133489-6","note":"Don't delete this file! It's used internally to help with page regeneration."}